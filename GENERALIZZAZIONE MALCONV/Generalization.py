
import yaml
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from src1.model import MalConvGCT
from src.model import MalConv
from src.util import ExeDataset,write_pred

config_path = "/home/semanos/VALIDATION/config/example.yaml"
seed = 123
conf = yaml.load(open(config_path,'r'), Loader=yaml.FullLoader)



exp_name = conf['exp_name']+'_sd_'+str(seed)
print('Experiment:')
print('\t',exp_name)

np.random.seed(seed)
torch.manual_seed(seed)

train_data_path = conf['train_data_path']
train_label_path = conf['train_label_path']

valid_data_path = conf['valid_data_path']
valid_label_path = conf['valid_label_path']

log_dir = conf['log_dir']
pred_dir = conf['pred_dir']
checkpoint_dir = conf['checkpoint_dir']


log_file_path = log_dir+exp_name+'.log'
chkpt_acc_path = checkpoint_dir+exp_name+'.model'
pred_path = pred_dir+exp_name+'.pred'

# Parameters
use_gpu = conf['use_gpu']
use_cpu = conf['use_cpu']
learning_rate = conf['learning_rate']
batch_size = conf['batch_size']
first_n_byte = conf['first_n_byte']
window_size = conf['window_size']
display_step = conf['display_step']

sample_cnt = conf['sample_cnt']
print(valid_data_path)

val_label_table = pd.read_csv(valid_label_path,header=None,index_col=0)
val_label_table.index=val_label_table.index.str.upper()
val_label_table = val_label_table.rename(columns={1:'ground_truth'})

val_table = val_label_table.groupby(level=0).last()
del val_label_table
print('Test Set:')
print('\tTotal',len(val_table),'files')
print('\tMalware Count :',val_table['ground_truth'].value_counts()[1])
#print('\tGoodware Count:',val_table['ground_truth'].value_counts()[0])

validloader = DataLoader(ExeDataset(list(val_table.index), valid_data_path, list(val_table.ground_truth),first_n_byte),
                    batch_size=batch_size, shuffle=False, num_workers=use_cpu)

valid_idx = list(val_table.index)
del val_table
malconv = MalConv(input_length=first_n_byte,window_size=window_size)
#malconv = MalConvGCT(out_size=1,channels=256, window_size=256, stride=64)
malconv= torch.load('/home/semanos/VALIDATION/malconv_net_sd_123prova.model')
#malconv= torch.load('/home/semanos/Scrivania/MALCONV FINALE/checkpoint/malconv_net_sd_123120.model')

bce_loss = nn.BCEWithLogitsLoss()
adam_optim = optim.Adam([{'params':malconv.parameters()}],lr=learning_rate, weight_decay=1e-5)
sigmoid = nn.Sigmoid()

test_loss= []
test_acc=[]
malconv.eval()

for _,val_batch_data in enumerate(validloader):
    cur_batch_size = val_batch_data[0].size(0)

    exe_input = val_batch_data[0].cuda() if use_gpu else val_batch_data[0]
    exe_input = Variable(exe_input.long(),requires_grad=False)

    label1 = val_batch_data[1].cuda() if use_gpu else val_batch_data[1]
    label = Variable(label1.float(),requires_grad=False)
    pred,_,_= malconv(exe_input)
    loss = bce_loss(pred,label)
    test_loss.append(loss.detach().cpu().numpy())
    test_acc.extend(list(label.cpu().data.numpy().astype(int)==(sigmoid(pred).cpu().data.numpy()+0.5).astype(int)))

print("Loss - Validation: {:.4f}".format(np.mean(test_loss)))   
print("Accuracy - Validation: {:.4f}".format(np.mean(test_acc))) 
